
// -- user code here --

/* --- start generated code --- */

// Generated by Phaser Editor v1.4.1 (Phaser v2.6.2)


/**
 * Level2.
 */
function Level2() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level2_proto = Object.create(Phaser.State.prototype);
Level2.prototype = Level2_proto;
Level2.prototype.constructor = Level2;

Level2.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#e4ecf6';
	
	this.initCustom();
	
};

Level2.prototype.preload = function () {
	
	this.load.pack('sprites', 'assets/pack.json');
	this.load.pack('maps', 'assets/pack.json');
	this.load.pack('popUp', 'assets/pack.json');
	
};

Level2.prototype.create = function () {
	var _end_pipe = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _collider_end = this.add.tileSprite(7512, 491, 144, 182, 'collider', 0, _end_pipe);
	_collider_end.alpha = 0.5;
	_collider_end.body.moves = false;
	
	var _background = this.add.group();
	
	this.add.sprite(5120, 0, 'level2-5', null, _background);
	
	this.add.sprite(3840, 0, 'level2-4', null, _background);
	
	this.add.sprite(2560, 0, 'level2-3', null, _background);
	
	this.add.sprite(1280, 0, 'level2-2', null, _background);
	
	this.add.sprite(6400, 0, 'level2-6', null, _background);
	
	this.add.sprite(0, 0, 'level2-1', null, _background);
	
	var _props = this.add.group();
	
	var _prop_BulldozerLargeShovel = this.add.sprite(7086, 485, 'prop_BulldozerLargeShovel', 0, _props);
	var _prop_BulldozerLargeShovel_default = _prop_BulldozerLargeShovel.animations.add('default', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], 15, true);
	_prop_BulldozerLargeShovel_default.play();
	
	var _prop_BarnDoors = this.add.sprite(748, 560, 'prop_BarnDoors', 0, _props);
	var _prop_BarnDoors_default = _prop_BarnDoors.animations.add('default', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], 60, true);
	_prop_BarnDoors_default.play();
	
	var _prop_townClock = this.add.sprite(3557, 285, 'prop_townClock', 0, _props);
	var _prop_townClock_default = _prop_townClock.animations.add('default', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], 1, true);
	_prop_townClock_default.play();
	
	var _prop_Bulldozer_new = this.add.sprite(147, 517, 'prop_Bulldozer_new', 0, _props);
	var _prop_Bulldozer_new_default = _prop_Bulldozer_new.animations.add('default', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], 15, true);
	_prop_Bulldozer_new_default.play();
	
	var _floor = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	this.add.tileSprite(0, 670, 7680, 50, 'collider', 0, _floor);
	
	var _vehicles = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _vehicle = this.add.sprite(1008, 531, 'vehicle1', null, _vehicles);
	_vehicle.anchor.setTo(0.5, 0.0);
	_vehicle.body.collideWorldBounds = true;
	
	var _vehicle3 = this.add.sprite(2478, 532, 'vehicle2', null, _vehicles);
	_vehicle3.anchor.setTo(0.5, 0.0);
	
	var _vehicle1 = this.add.sprite(3935, 491, 'vehicle4', null, _vehicles);
	_vehicle1.anchor.setTo(0.5, 0.0);
	
	var _obsticles = this.add.group();
	
	this.add.sprite(6402, 1, 'level2_obsticles6', null, _obsticles);
	
	this.add.sprite(0, 0, 'level2_obsticles1', null, _obsticles);
	
	this.add.sprite(1280, 0, 'level2_obsticles2', null, _obsticles);
	
	this.add.sprite(2560, 0, 'level2_obsticles3', null, _obsticles);
	
	this.add.sprite(3840, 0, 'level2_obsticles4', null, _obsticles);
	
	this.add.sprite(5120, 0, 'level2_obsticles5', null, _obsticles);
	
	var _collision = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_collision.alpha = 0.5;
	
	this.add.tileSprite(3100, 448, 19, 236, 'collider', 0, _collision);
	
	this.add.tileSprite(6901, 574, 198, 110, 'collider', 0, _collision);
	
	this.add.tileSprite(2002, 571, 112, 112, 'collider', 0, _collision);
	
	this.add.tileSprite(2036, 503, 68, 68, 'collider', 0, _collision);
	
	this.add.tileSprite(4892, 501, 268, 171, 'collider', 0, _collision);
	
	this.add.tileSprite(4344, 503, 105, 178, 'collider', 0, _collision);
	
	this.add.tileSprite(5558, 531, 167, 141, 'collider', 0, _collision);
	
	this.add.tileSprite(5180, 447, 22, 234, 'collider', 0, _collision);
	
	this.add.tileSprite(6800, 607, 102, 75, 'collider', 0, _collision);
	
	this.add.tileSprite(548, 503, 40, 222, 'collider', 0, _collision);
	
	var _enemies = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_enemies.position.setTo(0, 4);
	
	var _enemy2_sprite = this.add.sprite(5365, 488, 'enemy2_sprite', 0, _enemies);
	_enemy2_sprite.anchor.setTo(0.5, 0.0);
	_enemy2_sprite.body.collideWorldBounds = true;
	
	var _enemy3_sprite = this.add.sprite(6532, 491, 'enemy1_sprite', 0, _enemies);
	_enemy3_sprite.anchor.setTo(0.5, 0.0);
	_enemy3_sprite.body.collideWorldBounds = true;
	
	var _enemy4_sprite = this.add.sprite(4677, 525, 'enemy2_sprite', 0, _enemies);
	_enemy4_sprite.anchor.setTo(0.5, 0.0);
	_enemy4_sprite.body.collideWorldBounds = true;
	
	var _enemy1_sprite = this.add.sprite(4025, 396, 'enemy1_sprite', 0, _enemies);
	_enemy1_sprite.anchor.setTo(0.5, 0.0);
	_enemy1_sprite.body.collideWorldBounds = true;
	
	var _enemy5_sprite = this.add.sprite(2802, 359, 'enemy2_sprite', 0, _enemies);
	_enemy5_sprite.anchor.setTo(0.5, 0.0);
	_enemy5_sprite.body.collideWorldBounds = true;
	
	var _enemy6_sprite = this.add.sprite(1142, 483, 'enemy1_sprite', 0, _enemies);
	_enemy6_sprite.anchor.setTo(0.5, 0.0);
	_enemy6_sprite.body.collideWorldBounds = true;
	
	var _hero = new mike(this.game, 108, 389);
	this.add.existing(_hero);
	
	var _contentBoxes = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _contentbox_sprite2 = new contentBox(this.game, 520, 15);
	_contentbox_sprite2.name = 'contentBox_l2b1';
	_contentBoxes.add(_contentbox_sprite2);
	
	var _contentbox_sprite3 = new contentBox(this.game, 2020, 10);
	_contentbox_sprite3.name = 'contentBox_l2b2';
	_contentBoxes.add(_contentbox_sprite3);
	
	var _contentbox_sprite4 = new contentBox(this.game, 3070, 15);
	_contentbox_sprite4.name = 'contentBox_l2b3';
	_contentBoxes.add(_contentbox_sprite4);
	
	var _contentbox_sprite5 = new contentBox(this.game, 4350, 15);
	_contentbox_sprite5.name = 'contentBox_l2b4';
	_contentBoxes.add(_contentbox_sprite5);
	
	var _contentbox_sprite6 = new contentBox(this.game, 5620, 15);
	_contentbox_sprite6.name = 'contentBox_l2b5';
	_contentBoxes.add(_contentbox_sprite6);
	
	var _contentbox_sprite7 = new contentBox(this.game, 6987, 15);
	_contentbox_sprite7.name = 'contentBox_l2b6';
	_contentBoxes.add(_contentbox_sprite7);
	
	var _boss_trigger = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _collider_boss = this.add.tileSprite(7296, 0, 150, 673, 'collider', 0, _boss_trigger);
	_collider_boss.alpha = 0.5;
	
	var _pipeUnlocked = this.add.sprite(7481, 491, 'pipeUnlocked');
	_pipeUnlocked.alpha = 0.0;
	
	var _level_instructions = this.add.sprite(7183, 13, 'level_instructions');
	_level_instructions.name = 'jumpOnPipe';
	_level_instructions.alpha = 0.0;
	
	// public fields
	
	this.fEnd_pipe = _end_pipe;
	this.fBackground = _background;
	this.fFloor = _floor;
	this.fVehicles = _vehicles;
	this.fCollision = _collision;
	this.fEnemies = _enemies;
	this.fEnemy6_sprite = _enemy6_sprite;
	this.fHero = _hero;
	this.fContentBoxes = _contentBoxes;
	this.fContentbox_sprite2 = _contentbox_sprite2;
	this.fBoss_trigger = _boss_trigger;
	this.fPipeUnlocked = _pipeUnlocked;
	this.fLevel_instructions = _level_instructions;
	this.createCustom();
	
};

/* --- end generated code --- */
// -- user code here --

/* --- end generated code --- */
//-- user code here --

//Constants
var WALK_SPEED = 400;
var JUMP_SPEED = 650;
var ENEMY_SPEED = 100;
var ENEMY_HOP_SPEED = 200;
var KNOCK_BACK = 100;
var KNOCK_UP = 400;
var controls = true;
var vehiclesMoving = true;

//Shell
var isInShell = parent && 'Shell' in parent;
var Shell = isInShell ? parent.Shell : undefined;
var LMS = isInShell ? parent.LMS : undefined;

Level2.prototype.update = function() {
	// Collide with environment:    

	this.physics.arcade.collide(this.fHero, this.fFloor);
	this.physics.arcade.collide(this.fEnemies, this.fFloor);
	this.physics.arcade.collide(this.fVehicles, this.fFloor);
	this.physics.arcade.collide(this.fHero, this.fCollision);
	this.physics.arcade.collide(this.fHero, this.fEnd_pipe);
	this.physics.arcade.collide(this.fEnd_pipe, this.fFloor);
	this.physics.arcade.collide(this.fHero, this.fEnd_pipe, function(hero, end){
		if(isInShell) {
			
			if(end.body.touching.up){
				hero.body.velocity.x = 0;
				hero.scale.x = -1;
				controls = false;
				XMLog('hero.controls: ' + hero.controls);
				console.log('end hit');
				Shell.PlaySound('pipe');
				hero.body.moves = false;
				hero.x = 7580;
			    var tween = game.add.tween(hero);
			    tween.to({ y: 800 }, 3000, 'Linear', true, 0);
			    setTimeout(function(){Shell.GoToSlide(2);}, 3000);
			}
		}
	});
	
	this.physics.arcade.collide(this.fEnemies, this.fCollision, function(enemy, box) {
		if(enemy.body.touching.left) {
			enemy.scale.x = -1;
		}
		else if(enemy.body.touching.right){
			enemy.scale.x = 1;
		}
		
	});
		
	this.physics.arcade.collide(this.fVehicles, this.fCollision, function(vehicle, box) {
		
		if(vehicle.body.touching.left) {
			vehicle.scale.x = -1;
		}
		else if(vehicle.body.touching.right){
			vehicle.scale.x = 1;
		}
		
	});
	// Content Boxes:
 
 this.physics.arcade.collide(this.fHero, this.fContentBoxes, function(hero, box) {
 	if(isInShell) {
		if(hero.body.touching.up){
		Shell.PlaySound('bump');
		
		hero.game.paused = true;
		boxesHit.push(box.name);
		Shell.ShowContentBox(box.name, function() {
			hero.game.paused = false;
		});
		
		if(box.animations.currentAnim.name == 'complete')
    		return;
    	
    	
    	box.animations.play('complete');    	
	}}
	
 });
 
 // Boss
  
 var that = this;
 
 this.physics.arcade.collide(this.fHero, this.fBoss_trigger, function(hero, box) {
 	if(isInShell && boxesHit.length == that.fContentBoxes.children.length) {
 	console.log('boss collider hit');
 		hero.game.paused = true;
 		$('#canvas').show();
 		root.play();
 	}
 });
	// Move Hero, if not already moving from being hurt:
 

//XMLog('hero.controls: ' + controls);
 
 if(!this.fHero.hurt) {
		if (this.cursors.left.isDown && controls  || this.leftArrow.isDown && controls) {
	        this.fHero.body.velocity.x = -WALK_SPEED;
	        this.fHero.scale.x = -1;
	    } else if (this.cursors.right.isDown && controls || this.rightArrow.isDown && controls) {
	        this.fHero.body.velocity.x = WALK_SPEED;
	        this.fHero.scale.x = 1;
	    } else {
	    	this.fHero.body.velocity.x = 0;
	    }
}

 var touching = this.fHero.body.touching.down;
 
 if(touching) {
 	if(this.fHero.hurt)
 		this.fHero.hurt = false;
 	else if(this.fHero.body.velocity.x == 0)
 		this.fHero.animations.play('idle');
 	else
 		this.fHero.animations.play('walk');
 }

 if(touching && this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR) && !this.fHero.hurt || touching && this.jumpbutton.isDown && !this.fHero.hurt) {
 	this.jumping = true;
 	
 	this.fHero.body.velocity.y = -JUMP_SPEED;
 	this.fHero.animations.play('jump');
 } else if(this.jumping && touching) {
 	this.jumping = false;
 	
 	this.fHero.body.velocity.y = 0;
 }
 
 // Move Enemies:
 this.fEnemies.forEach(function(enemy) {
 	// If we're touching the ground, hop. Otherwise stop moving and wait a moment.
 	if(enemy.body.touching.down && enemy.hopping) {
 		enemy.waiting = true;
 		enemy.hopping = false;
 		enemy.body.velocity.x = 0;
 		// Pause for a quarter second before hopping again
 		enemy.game.time.events.add(Phaser.Timer.QUARTER, function() {
 			enemy.waiting = false;
 		});
 	} else if(enemy.body.touching.down && !enemy.waiting) {
 		enemy.hopping = true;
 		
 		enemy.body.velocity.y = -ENEMY_HOP_SPEED;
 		enemy.body.velocity.x = (enemy.scale.x * -1) * ENEMY_SPEED;
 	}
	 
//	 if(enemy.body.touching.down && enemy.waiting) {
//	 		enemy.waiting = true;
//	 		enemy.hopping = false;
//	 		enemy.body.velocity.x = 0;
//	 		// Pause for a quarter second before hopping again
//	 		enemy.game.time.events.add(Phaser.Timer.QUARTER, function() {
//	 			enemy.waiting = false;
//	 		});
//	 	} else if(enemy.body.touching.down && !enemy.waiting) {
//	 		enemy.body.velocity.x = (enemy.scale.x * -1) * ENEMY_SPEED;
//	 	}
	 
	/* if(enemy.body.touching.down && enemy.waiting) {
		 console.log('touching ground');
		 enemy.waiting = true;
	 		
	 		// Pause for a quarter second before hopping again
	 		enemy.game.time.events.add(Phaser.Timer.QUARTER, function() {
	 			enemy.waiting = false;
	 			enemy.body.velocity.x=150;
	 		});
	 		
	 } else if (enemy.body.blocked.left) {
		 //enemy.body.velocity.x = (enemy.scale.x * 1) * ENEMY_SPEED;
		 //enemy.body.bounce.setTo(1, 1);
		 //enemy.x += 1;
		 //console.log('hit left');
		 //enemy.body.velocity.x=150;
		 
	 } else if (enemy.body.blocked.right) {
		// enemy.body.velocity.x = (enemy.scale.x * -1) * ENEMY_SPEED;
		// enemy.body.bounce.setTo(1, 1);
		 //enemy.x -= 1;
		// console.log('hit right');
		// enemy.body.velocity.x=-150;
	 }*/
	 
 });
 
 this.fVehicles.forEach(function(vehicle) {
	 	// If we're touching the ground, hop. Otherwise stop moving and wait a moment.
	 if(vehicle.body.touching.down && vehicle.waiting) {
		 vehicle.waiting = true;
		 vehicle.hopping = false;
		 vehicle.body.velocity.x = 0;
		// Pause for a quarter second before hopping again
		 vehicle.game.time.events.add(Phaser.Timer.QUARTER, function() {
			 vehicle.waiting = false;
		});
	} else if(vehicle.body.touching.down && !vehicle.waiting) {
		//var moved = false
		
		//var tween = game.add.tween(hero);
	    //tween.to({ y: 800 }, 3000, 'Linear', true, 0);
		if (vehiclesMoving){
		setTimeout(function(){ 
		
			
			game.add.tween(vehicle).to( { x: '+30' }, 4000, Phaser.Easing.Linear.None, true);
			//flip cars
			//vehicle.scale.x = -1;
			//console.log('scale 1')
			vehicleMoving = false
		}, 8000);
		
		} else if (!vehiclesMoving) {
			setTimeout(function(){ 
					
				
				game.add.tween(vehicle).to( { x: '-30' }, 4000, Phaser.Easing.Linear.None, true);
				//flip cars
				//vehicle.scale.x = 1;
				//console.log('scale -1')
			}, 8000);
			
		}
	
				

			
	}
	
 });
	// Collide with enemies:
	this.physics.arcade.collide(this.fHero, this.fEnemies, function(hero, enemy) {		
		if(enemy.body.touching.up) {
			// TODO: Squish and remove physics body?
			enemy.kill();
			
			if(isInShell)
				Shell.PlaySound('destroy');
		} else if(enemy.body.touching.left) {
			
			hero.body.velocity.x = -KNOCK_UP;
			hero.body.velocity.y = -KNOCK_BACK;
			
			hero.hurt = true;			
			//enemy.body.velocity.x = 0;
			enemy.scale.x *= -1;
			
			if(isInShell)
				Shell.PlaySound('hurt');		
		} else if(enemy.body.touching.right) {
			hero.body.velocity.x = KNOCK_UP;
			hero.body.velocity.y = -KNOCK_BACK;

			hero.hurt = true;
			//enemy.body.velocity.x = 0;
			enemy.scale.x *= -1;
			
			if(isInShell)
				Shell.PlaySound('hurt');
		}
	});
};

Level2.prototype.render = function() {
	
};

Level2.prototype.initCustom = function() {
	this.physics.arcade.gravity.y = 900;
	
	if(isInShell) {
		Shell.BindCustomSlide(this);
		Shell.OnCustomSlideLoaded();
	}
};

Level2.prototype.createCustom = function() {
	// the world and content boxes shouldn't fall
	this.fCollision.setAll('body.immovable', true);
	this.fCollision.setAll('body.allowGravity', false);
	this.fCollision.setAll('renderable', false);
	
	this.fFloor.setAll('body.immovable', true);
	this.fFloor.setAll('body.allowGravity', false);
	this.fFloor.setAll('renderable', false);
	
	this.fBoss_trigger.setAll('body.immovable', true);
	this.fBoss_trigger.setAll('body.allowGravity', false);
	this.fBoss_trigger.setAll('renderable', false);
	
	this.fContentBoxes.setAll('body.immovable', true);
	this.fContentBoxes.setAll('body.allowGravity', false);
	
	// Input
	this.cursors = this.input.keyboard.createCursorKeys();
	this.pad = this.game.plugins.add(Phaser.VirtualJoystick);
	this.thing = this.pad.addButton();
	
	this.leftArrow = this.pad.addButton(50, 636, 'left_arrow', 'left_arrow-up', 'left_arrow-down');
	this.leftArrow.addKey(Phaser.KeyCode.LEFT);
	
	this.rightArrow = this.pad.addButton(121, 636, 'right_arrow', 'right_arrow-up', 'right_arrow-down');
	this.rightArrow.addKey(Phaser.KeyCode.RIGHT);
	
	this.jumpbutton = this.pad.addButton(1228, 636, 'jump_button', 'jump_button-up', 'jump_button-down');
	this.jumpbutton.addKey(Phaser.KeyCode.SPACEBAR);
	
	// Camera
	this.world.setBounds(0, 0, 7680, 720);
	this.game.camera.follow(this.fHero);
	
	if(isInShell) {
		boxesHit = LMS.GetFromSuspendData('level1_boxes') || [];
		// TODO : Loop through and set boxes to complete state.
		// TODO : Save state.
	}
};
	
Level2.prototype.OnBossComplete = function() {
	this.fBoss_trigger.destroy();
	LMS.SaveToSuspendData('i_3', true);
	Shell.UpdateIcons();
	Shell.SetSlideProgress(0, 4, 3);
	Shell.SetSlideProgress(0, 5, 2);
	$('#canvas').hide();
	document.getElementById('phaser').focus();
    this.game.paused = false;
    this.fLevel_instructions.alpha = 1;
    this.fPipeUnlocked.alpha = 1;
    bossComplete = true;
}