
// -- user code here --

/* --- start generated code --- */

// Generated by Phaser Editor v1.4.1 (Phaser v2.6.2)


/**
 * Level1.
 */
function Level1() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level1_proto = Object.create(Phaser.State.prototype);
Level1.prototype = Level1_proto;
Level1.prototype.constructor = Level1;

Level1.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#e4ecf6';
	
	this.initCustom();
	
};

Level1.prototype.preload = function () {
	
	this.load.pack('sprites', 'assets/pack.json');
	this.load.pack('maps', 'assets/pack.json');
	this.load.pack('popUp', 'assets/pack.json');
	
};

Level1.prototype.create = function () {
	var _end_pipe = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_end_pipe.position.setTo(-140, 46);
	_end_pipe.alpha = 0.5;
	
	var _collider_end = this.add.tileSprite(7647, 445, 144, 182, 'collider', 0, _end_pipe);
	_collider_end.body.moves = false;
	
	var _background = this.add.group();
	
	this.add.sprite(5120, 0, 'level1-5', null, _background);
	
	this.add.sprite(3840, 0, 'level1-4', null, _background);
	
	this.add.sprite(2560, 0, 'level1-3', null, _background);
	
	this.add.sprite(1280, 0, 'level1-2', null, _background);
	
	this.add.sprite(0, 0, 'level1-1', null, _background);
	
	this.add.sprite(6400, 0, 'level1-6', null, _background);
	
	var _props = this.add.group();
	
	var _windmill0 = new windmill(this.game, 128, 354);
	_props.add(_windmill0);
	
	var _windmill1 = new windmill(this.game, 301, 306);
	_props.add(_windmill1);
	
	var _windmill3 = new windmill(this.game, 1322, 355);
	_props.add(_windmill3);
	
	var _windmill_sprite = new windmill(this.game, 4575, 307);
	_props.add(_windmill_sprite);
	
	var _windmill_sprite1 = new windmill(this.game, 4876, 383);
	_props.add(_windmill_sprite1);
	
	var _windmill_sprite2 = new windmill(this.game, 5247, 418);
	_props.add(_windmill_sprite2);
	
	var _nuclear_sprite = new nuclear(this.game, 5715, 452);
	_props.add(_nuclear_sprite);
	
	var _oilPump_sprite = new oilPump(this.game, 1478, 552);
	_props.add(_oilPump_sprite);
	
	var _oilPump_sprite1 = new oilPump(this.game, 1662, 593);
	_props.add(_oilPump_sprite1);
	
	var _oilPump_sprite2 = new oilPump(this.game, 3687, 535);
	_props.add(_oilPump_sprite2);
	
	var _coal_sprite = new coal(this.game, 3903, 426);
	_props.add(_coal_sprite);
	
	var _oilPump_sprite3 = new oilPump(this.game, 6383, 576);
	_props.add(_oilPump_sprite3);
	
	var _windmill_sprite3 = new windmill(this.game, 7114, 311);
	_props.add(_windmill_sprite3);
	
	var _windmill_sprite4 = new windmill(this.game, 7301, 311);
	_props.add(_windmill_sprite4);
	
	var _windmill2 = new windmill(this.game, 508, 401);
	_props.add(_windmill2);
	
	var _collision = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_collision.alpha = 0.5;
	
	this.add.tileSprite(4469, 460, 22, 214, 'collider', 0, _collision);
	
	this.add.tileSprite(1561, 518, 75, 152, 'collider', 0, _collision);
	
	this.add.tileSprite(642, 570, 112, 100, 'collider', 0, _collision);
	
	this.add.tileSprite(677, 502, 69, 68, 'collider', 0, _collision);
	
	this.add.tileSprite(1963, 460, 242, 214, 'collider', 0, _collision);
	
	this.add.tileSprite(2205, 348, 402, 324, 'collider', 0, _collision);
	
	this.add.tileSprite(2608, 428, 321, 242, 'collider', 0, _collision);
	
	this.add.tileSprite(3255, 592, 91, 78, 'collider', 0, _collision);
	
	this.add.tileSprite(5439, 502, 266, 168, 'collider', 0, _collision);
	
	this.add.tileSprite(6940, 592, 90, 79, 'collider', 0, _collision);
	
	this.add.tileSprite(2638, 531, 321, 242, 'collider', 0, _collision);
	
	var _floor = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	this.add.tileSprite(0, 670, 7680, 50, 'collider', 0, _floor);
	
	var _enemies = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _enemy1_sprite = new enemy1(this.game, 1329, 490);
	_enemy1_sprite.name = 'monster1';
	_enemies.add(_enemy1_sprite);
	
	var _enemy1_sprite1 = new enemy1(this.game, 4309, 477);
	_enemies.add(_enemy1_sprite1);
	
	var _enemy2_sprite = new enemy2(this.game, 1895, 531);
	_enemies.add(_enemy2_sprite);
	
	var _enemy2_sprite1 = new enemy2(this.game, 5373, 533);
	_enemies.add(_enemy2_sprite1);
	
	var _enemy1_sprite2 = new enemy1(this.game, 6777, 482);
	_enemies.add(_enemy1_sprite2);
	
	var _hero = new mike(this.game, 132, 390);
	this.add.existing(_hero);
	
	var _contentBoxes = this.add.physicsGroup(Phaser.Physics.ARCADE);
	
	var _contentbox_sprite = new contentBox(this.game, 640, 15);
	_contentbox_sprite.name = 'contentBox_l1b1';
	_contentBoxes.add(_contentbox_sprite);
	
	var _contentbox_sprite1 = new contentBox(this.game, 1920, 10);
	_contentbox_sprite1.name = 'contentBox_l1b2';
	_contentBoxes.add(_contentbox_sprite1);
	
	var _contentbox_sprite2 = new contentBox(this.game, 3250, 15);
	_contentbox_sprite2.name = 'contentBox_l1b3';
	_contentBoxes.add(_contentbox_sprite2);
	
	var _contentbox_sprite3 = new contentBox(this.game, 4430, 15);
	_contentbox_sprite3.name = 'contentBox_l1b4';
	_contentBoxes.add(_contentbox_sprite3);
	
	var _contentbox_sprite4 = new contentBox(this.game, 5605, 15);
	_contentbox_sprite4.name = 'contentBox_l1b5';
	_contentBoxes.add(_contentbox_sprite4);
	
	
	var _boss_trigger = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_boss_trigger.position.setTo(500, 0);
	
	var _collider_boss = this.add.tileSprite(6674, 0, 150, 673, 'collider', 0, _boss_trigger);
	_collider_boss.alpha = 0.5;
	
	var _level_instructions = this.add.sprite(7183, 13, 'level_instructions');
	_level_instructions.name = 'jumpOnPipe';
	_level_instructions.alpha = 0.0;
	
	var _pipeUnlocked = this.add.sprite(7480, 490, 'pipeUnlocked');
	_pipeUnlocked.alpha = 0.0;
	
	var _mobileButtons = this.add.group();
	
	// public fields
	
	this.fEnd_pipe = _end_pipe;
	this.fBackground = _background;
	this.fCollision = _collision;
	this.fFloor = _floor;
	this.fEnemies = _enemies;
	this.fEnemy1_sprite = _enemy1_sprite;
	this.fEnemy2_sprite = _enemy2_sprite;
	this.fHero = _hero;
	this.fContentBoxes = _contentBoxes;
	this.fContentbox_sprite = _contentbox_sprite;
	this.fBoss_trigger = _boss_trigger;
	this.fLevel_instructions = _level_instructions;
	this.fPipeUnlocked = _pipeUnlocked;
	this.fMobileButtons = _mobileButtons;
	this.createCustom();
	
};

/* --- end generated code --- */
// -- user code here --

// Constants
var WALK_SPEED = 200;
var JUMP_SPEED = 650;
var ENEMY_SPEED = 100;
var ENEMY_HOP_SPEED = 200;
var KNOCK_BACK = 100;
var KNOCK_UP = 400;
var controls = true;

// Shell
var isInShell = parent && 'Shell' in parent;
var Shell = isInShell ? parent.Shell : undefined;
var LMS = isInShell ? parent.LMS : undefined;

var boxesHit = [];

Level1.prototype.update = function() {	
	// Collide with environment:    

	this.physics.arcade.collide(this.fHero, this.fFloor);
	this.physics.arcade.collide(this.fEnemies, this.fFloor);
	this.physics.arcade.collide(this.fHero, this.fCollision);
	this.physics.arcade.collide(this.fHero, this.fEnd_pipe);
	this.physics.arcade.collide(this.fEnd_pipe, this.fFloor);
	this.physics.arcade.collide(this.fHero, this.fEnd_pipe, function(hero, end){
		if(isInShell) {
			if(end.body.touching.up){
				hero.body.velocity.x = 0;
				hero.scale.x = -1;
				controls = false;
				Shell.PlaySound('pipe');
				hero.body.moves = false;
				hero.x = 7580;
			    var tween = game.add.tween(hero);
			    tween.to({ y: 800 }, 3000, 'Linear', true, 0);
			    setTimeout(function(){Shell.GoToSlide(2);}, 3000);
			}
		}
	});
	this.physics.arcade.collide(this.fEnemies, this.fCollision, function(enemy, box) {
		if(enemy.body.touching.left)
			enemy.scale.x = -1;
		else if(enemy.body.touching.right)
			enemy.scale.x = 1;
	});
		
	// Content Boxes:
    
    this.physics.arcade.collide(this.fHero, this.fContentBoxes, function(hero, box) {    	
    	if(isInShell) {
    		if(hero.body.touching.up){
    		Shell.PlaySound('bump');
    		
    		hero.game.paused = true;
    		boxesHit.push(box.name);
     		console.log(box.name);
    		Shell.ShowContentBox(box.name, function() {
    			hero.game.paused = false;
    		});
    		
    		if(box.animations.currentAnim.name == 'complete')
        		return;
        	
        	box.animations.play('complete');    	
    	}}
    	
    	
    });
    
    // Boss
    
    var that = this;
    
    this.physics.arcade.collide(this.fHero, this.fBoss_trigger, function(hero, box) {
    //	if(isInShell && boxesHit.length == that.fContentBoxes.children.length) {
    	console.log('boss collider hit');
    		hero.game.paused = true;
    		$('#canvas').show();
    		root.play();
    	//}
    });
    
    // First enable the sprite to receive input
    //this.fLeft_arrow.inputEnabled = true;
    //this.fRight_arrow.inputEnabled = true;
    
	// Move Hero, if not already moving from being hurt:
    
    if(!this.fHero.hurt) {
    	
       /* this.fLeft_arrow.input.touch.onInputDown.add(function() {    	
        	this.fHero.body.velocity.x = -WALK_SPEED;
        	this.fHero.scale.x = -1;
   	 	}, this);
        
        this.fRight_arrow.events.onInputDown.add(function() {
        	this.fHero.body.velocity.x = WALK_SPEED;
	        this.fHero.scale.x = 1;
        }, this);*/
        
		if (this.cursors.left.isDown && controls || this.leftArrow.isDown && controls) {
	        this.fHero.body.velocity.x = -WALK_SPEED;
	        this.fHero.scale.x = -1;
	    } else if (this.cursors.right.isDown && controls || this.rightArrow.isDown && controls) {
	        this.fHero.body.velocity.x = WALK_SPEED;
	        this.fHero.scale.x = 1;
	    } else {
	    	this.fHero.body.velocity.x = 0;
	    }
   }
    
    var touching = this.fHero.body.touching.down;
    
    if(touching) {
    	if(this.fHero.hurt)
    		this.fHero.hurt = false;
    	else if(this.fHero.body.velocity.x == 0)
    		this.fHero.animations.play('idle');
    	else
    		this.fHero.animations.play('walk');
    }
 
    if(touching && this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR) && !this.fHero.hurt || touching && this.jumpbutton.isDown && !this.fHero.hurt ) {
    	this.jumping = true;
    	
    	this.fHero.body.velocity.y = -JUMP_SPEED;
    	this.fHero.animations.play('jump');
    } else if(this.jumping && touching) {
    	this.jumping = false;
    	
    	this.fHero.body.velocity.y = 0;
    }
    
    // Move Enemies:
    this.fEnemies.forEach(function(enemy) {
    	// If we're touching the ground, hop. Otherwise stop moving and wait a moment.
    	if(enemy.body.touching.down && enemy.hopping) {
    		enemy.waiting = true;
    		enemy.hopping = false;
    		enemy.body.velocity.x = 0;
    		// Pause for a quarter second before hopping again
    		enemy.game.time.events.add(Phaser.Timer.QUARTER, function() {
    			enemy.waiting = false;
    		});
    	} else if(enemy.body.touching.down && !enemy.waiting) {
    		enemy.hopping = true;
    		
    		enemy.body.velocity.y = -ENEMY_HOP_SPEED;
    		enemy.body.velocity.x = (enemy.scale.x * -1) * ENEMY_SPEED;
    	}
    });
	
	// Collide with enemies:
	this.physics.arcade.collide(this.fHero, this.fEnemies, function(hero, enemy) {		
		if(enemy.body.touching.up) {
			// TODO: Squish and remove physics body?
			enemy.kill();
			
			if(isInShell)
				Shell.PlaySound('destroy');
		} else if(enemy.body.touching.left) {
			
			hero.body.velocity.x = -KNOCK_UP;
			hero.body.velocity.y = -KNOCK_BACK;
			
			hero.hurt = true;			
			enemy.body.velocity.x = 0;
			enemy.scale.x *= -1;
			
			if(isInShell)
				Shell.PlaySound('hurt');		
		} else if(enemy.body.touching.right) {
			hero.body.velocity.x = KNOCK_UP;
			hero.body.velocity.y = -KNOCK_BACK;

			hero.hurt = true;
			enemy.body.velocity.x = 0;
			enemy.scale.x *= -1;
			
			if(isInShell)
				Shell.PlaySound('hurt');
		}
	});
};

Level1.prototype.render = function() {
	
};

Level1.prototype.initCustom = function() {
	this.physics.arcade.gravity.y = 900;
	
	if(isInShell) {
		Shell.BindCustomSlide(this);
		Shell.OnCustomSlideLoaded();
	}
};

Level1.prototype.createCustom = function() {
	// the world and content boxes shouldn't fall
	this.fCollision.setAll('body.immovable', true);
	this.fCollision.setAll('body.allowGravity', false);
	this.fCollision.setAll('renderable', false);
	
	this.fFloor.setAll('body.immovable', true);
	this.fFloor.setAll('body.allowGravity', false);
	this.fFloor.setAll('renderable', false);
	
	this.fBoss_trigger.setAll('body.immovable', true);
	this.fBoss_trigger.setAll('body.allowGravity', false);
	this.fBoss_trigger.setAll('renderable', false);
		
	this.fContentBoxes.setAll('body.immovable', true);
	this.fContentBoxes.setAll('body.allowGravity', false);


	
	// Input
	this.cursors = this.input.keyboard.createCursorKeys();
	this.pad = this.game.plugins.add(Phaser.VirtualJoystick);
	this.thing = this.pad.addButton();

	this.pad = this.game.plugins.add(Phaser.VirtualJoystick);

	this.leftArrow = this.pad.addButton(50, 636, 'left_arrow', 'left_arrow-up', 'left_arrow-down');
	this.leftArrow.addKey(Phaser.KeyCode.LEFT);
	
	this.rightArrow = this.pad.addButton(121, 636, 'right_arrow', 'right_arrow-up', 'right_arrow-down');
	this.rightArrow.addKey(Phaser.KeyCode.RIGHT);
	
	this.jumpbutton = this.pad.addButton(1228, 636, 'jump_button', 'jump_button-up', 'jump_button-down');
	this.jumpbutton.addKey(Phaser.KeyCode.SPACEBAR);
	
	// Camera
	this.world.setBounds(0, 0, 7680, 720);
	this.game.camera.follow(this.fHero);
	
	// Load state
	if(isInShell) {
		boxesHit = LMS.GetFromSuspendData('level1_boxes') || [];
		// TODO : Loop through and set boxes to complete state.
		// TODO : Save state.
	}
};
	
Level1.prototype.OnBossComplete = function() {
	this.fBoss_trigger.destroy();
	LMS.SaveToSuspendData('i_1', true);
	Shell.UpdateIcons();
	Shell.SetSlideProgress(0, 2, 3);
	Shell.SetSlideProgress(0, 3, 2);
	$('#canvas').hide();
	document.getElementById('phaser').focus();
    this.game.paused = false;
    this.fLevel_instructions.alpha = 1;
    this.fPipeUnlocked.alpha = 1;
    bossComplete = true;
}